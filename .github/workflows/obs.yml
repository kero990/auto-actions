name: Build-OBS
on:
  workflow_dispatch:

jobs:
  extract-qt6:
    runs-on: ubuntu-latest
    steps:
    - name: Pull Docker image
      run: docker pull aliencoweatcake/amd64-bionic-qt6projects

    - name: Run container and pack Qt6
      run: |
        docker run --rm -v $(pwd):/workspace aliencoweatcake/amd64-bionic-qt6projects \
          bash -c "tar -czvf /workspace/qt-bionic_amd64.tar.gz -C /opt qt6"
    - name: Upload Qt6 as artifact
      uses: actions/upload-artifact@v4
      with:
        name: qt-bionic_amd64
        path: qt-bionic_amd64.tar.gz
        
  install-python3-embeddable:      
     runs-on: ubuntu-latest
     container:
      image: debian:10
     steps:
     - name: install python
       run: |
          apt update && apt install -y wget \
            curl \
            gnupg \
            lsb-release \
            software-properties-common \
            build-essential \
            unzip \
            xz-utils \
            pkg-config \
            git \
            ca-certificates \
            cmake
          git clone https://github.com/lmbelo/python3-embeddable
          cd python3-embeddable/python3-linux
          chmod +x *.sh && chmod +x Linux/*.py
          PYVER=3.10.12 ./build.sh
          tar czvf python3-embeddable.tar.gz embedabble/
          
     - name: Upload python as artifact
       uses: actions/upload-artifact@v4
       with:
         name: python3-embeddable
         path: python3-embeddable/python3-linux/python3-embeddable.tar.gz
          
  build-obs:
    name: Build OBS Studio
    needs:
      - extract-qt6
      - install-python3-embeddable
    runs-on: ubuntu-latest
    container:
      image: debian:10

    steps:
      # Step 1: 安装系统和工具链依赖
      - name: Install Core Tools and Libraries
        run: |
          apt-get update && apt-get install -y --no-install-recommends \
            wget \
            curl \
            gnupg \
            lsb-release \
            software-properties-common \
            build-essential \
            unzip \
            xz-utils \
            pkg-config \
            git \
            ca-certificates \
            libtinfo5 \
            zlib1g-dev \
            libffi-dev \
            swig \
            libgl1-mesa-dev \
            libglvnd-dev \
            libgles2-mesa-dev \
            libx11-dev \
            libxrender-dev \
            libxcb1-dev \
            libxcb-randr0-dev \
            libxcb-shm0-dev \
            libxcb-xfixes0-dev \
            libxcb-composite0-dev \
            libx11-xcb-dev \
            libpulse-dev \
            libjack-jackd2-dev \
            libfontconfig-dev \
            libudev-dev \
            libdrm-dev \
            jq
      # Step 2: 安装 CMake 和 Ninja（最新版本）并设置到环境变量
      - name: Install CMake and Ninja
        run: |
          mkdir -p /opt/custom-tools
          curl -L https://github.com/Kitware/CMake/releases/download/v3.27.7/cmake-3.27.7-linux-x86_64.tar.gz | tar --strip-components=1 -xz -C /opt/custom-tools
          curl -L https://github.com/ninja-build/ninja/releases/download/v1.11.1/ninja-linux.zip -o ninja.zip
          unzip ninja.zip -d /opt/custom-tools
          rm ninja.zip
          echo "PATH=/opt/custom-tools/bin:$PATH" >> $GITHUB_ENV
      # Step 3: 安装 python3并设置到环境变量
      - name: Download python Artifact
        uses: actions/download-artifact@v4
        with:
          name: python3-embeddable
      - name: Extract python to /opt
        run: |
          tar -xzvf python3-embeddable.tar.gz
          mv ./embedabble /opt/python
          ls /opt && ls /opt/python
          echo "PYTHONHOME=/opt/python" >> $GITHUB_ENV
          echo "PYTHONPATH=/opt/python/bin/python3.10" >> $GITHUB_ENV
          echo "PATH=/opt/python/bin:$PATH" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=/opt/python/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=/opt/python/lib" >> $GITHUB_ENV
          echo "/opt/python/lib" > /etc/ld.so.conf.d/python.conf
          ldconfig
          rm python3-embeddable.tar.gz
          python3 --version
      - name: installl meson
        run: /opt/python/bin/pip3 install meson

      # Step 3: 安装 LLVM 20 工具链，并设置到环境变量
      - name: Install LLVM 20
        run: |
          wget https://apt.llvm.org/llvm.sh -O /tmp/llvm.sh
          chmod +x /tmp/llvm.sh
          /tmp/llvm.sh 20 all
          echo "LLVM_DIR=/usr/lib/llvm-20" >> $GITHUB_ENV
          echo "PATH=/usr/lib/llvm-20/bin:$PATH" >> $GITHUB_ENV

      # Step 2: 从 Docker 镜像中提取 Qt6 环境
      - name: Download Qt6 Artifact
        uses: actions/download-artifact@v4
        with:
          name: qt-bionic_amd64
      - name: Extract Qt6 to /opt
        run: |
          tar -xzf qt-bionic_amd64.tar.gz -C /opt
          echo "QT6_DIR=/opt/qt6" >> $GITHUB_ENV
          echo "PATH=/opt/qt6/bin:$PATH" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=/opt/qt6/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=/opt/qt6" >> $GITHUB_ENV
          echo "/opt/qt6/lib" > /etc/ld.so.conf.d/qt6.conf
          ldconfig
          rm qt-bionic_amd64.tar.gz
          
      # Step 2: 安装并编译 QR-Code-generator
      - name: Compile and Install QR-Code-generator
        run: |
          git clone https://github.com/nayuki/QR-Code-generator.git /tmp/QR-Code-generator
          cd /tmp/QR-Code-generator/cpp
          make
          cp libqrcodegencpp.a /usr/local/lib
          echo "/usr/local/lib" > /etc/ld.so.conf.d/user-libs.conf
          ldconfig

      # Step 3: 编译 libdrm 并安装
      - name: Compile and Install libdrm
        run: |
          git clone https://gitlab.freedesktop.org/mesa/drm.git /tmp/libdrm
          cd /tmp/libdrm
          meson build --prefix=/usr/local
          ninja -C build
          ninja  -C build install
          ldconfig

      # Step 4: 安装和配置 vcpkg
      - name: Setup vcpkg and Install Dependencies
        run: |
          git clone https://github.com/microsoft/vcpkg.git /opt/vcpkg
          /opt/vcpkg/bootstrap-vcpkg.sh -disableMetrics
          /opt/vcpkg/vcpkg install \
            ffmpeg[core]:x64-linux \
            openssl:x64-linux \
            sdl2:x64-linux \
            pipewire:x64-linux \
            pcre2:x64-linux \
            glib:x64-linux \
            x264:x64-linux
          echo "VCPKG_ROOT=/opt/vcpkg" >> $GITHUB_ENV
          echo "CMAKE_TOOLCHAIN_FILE=/opt/vcpkg/scripts/buildsystems/vcpkg.cmake" >> $GITHUB_ENV

      # Step 6: 下载 OBS Studio 源代码
      - name: Download OBS Studio Source Code
        run: |
          echo LATEST_RELEASE=$(curl -s https://api.github.com/repos/obsproject/obs-studio/releases/latest | jq -r .tag_name) >> $GITHUB_ENV
          wget https://github.com/obsproject/obs-studio/archive/refs/tags/OBS-Studio-$LATEST_RELEASE-Sources.tar.gz -O obs.tar.gz
          tar -xzf obs.tar.gz && mv obs-studio-*/ obs

      # Step 7: 修补 OBS 源代码（如果有必要）
      - name: Apply Source Code Patches
        run: |
          sed -i 's/QFile file(cur->location);/QFile file(QString::fromStdString(cur->location.string()));/g' obs/UI/obs-app-theming.cpp
          sed -i 's/QFile debugFile(debugOut);/QFile debugFile(QString::fromStdString(debugOut.string()));/g' obs/UI/obs-app-theming.cpp
          sed -i 's/QDir::addSearchPath("theme", absolute(installSearchDir));/QDir::addSearchPath("theme", QString::fromStdString(absolute(installSearchDir).string()));/g' obs/UI/obs-app-theming.cpp
          sed -i 's/QDir::addSearchPath("theme", absolute(configSearchDir));/QDir::addSearchPath("theme", QString::fromStdString(absolute(configSearchDir).string()));/g' obs/UI/obs-app-theming.cpp
          sed -i "18 i set(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nlink_libraries(stdc++fs)" obs/CMakeLists.txt
          
      # Step 8: 构建 OBS Studio
      - name: Build OBS Studio
        run: |
          source $GITHUB_ENV
          mkdir obs/build && cd obs/build
          cmake .. --preset ubuntu \
            -GNinja \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DCMAKE_TOOLCHAIN_FILE=$CMAKE_TOOLCHAIN_FILE \
            -DENABLE_RELOCATABLE=true \
            -DENABLE_PORTABLE_CONFIG=true \
            -DENABLE_BROWSER=false \
            -DOBS_COMPILE_DEPRECATION_AS_WARNING=true \
            -DENABLE_NVENC=false
            -DCMAKE_INSTALL_PREFIX=/opt/obs
            -DCMAKE_C_COMPILER=/usr/bin/clang-20 \
            -DCMAKE_CXX_COMPILER=/usr/bin/clang++-20 \
            -DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=lld" \
            -DCMAKE_SHARED_LINKER_FLAGS="-fuse-ld=lld" \
            -DCMAKE_LINKER=/usr/bin/ld.lld-20 \
            -DCMAKE_VERBOSE_MAKEFILE=ON \
            -DOBS_VERSION_OVERRIDE=$LATEST_RELEASE 
          ninja
          ninja install

      # Step 9: 打包为 AppImage
      - name: Package OBS as AppImage
        run: |
          cd /opt
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/1-alpha-20250213-1/linuxdeploy-plugin-qt-x86_64.AppImage
          chmod +x *.AppImage
          ./linuxdeploy-x86_64.AppImage -e obs/bin/obs -i obs/share/icons/hicolor/scalable/apps/com.obsproject.Studio.svg -d share/applications/com.obsproject.Studio.desktop \
            --output appimage \
            --plugin qt
            --appdir /opt/appdir
          mv obs*.AppImage obs.AppImage

      # Step 10: 上传 OBS 构建的 AppImage
      - name: Upload AppImage
        uses: actions/upload-artifact@v4
        with:
          name: OBS-AppImage
          path: /opt/obs.AppImage
