name: Build-OBS
on:
  workflow_dispatch:

jobs:
  build-obs:
    name: Build OBS Studio
    runs-on: ubuntu-latest
    container:
      image: python:3.10-buster

    steps:
      - name: checkout
        uses: actions/checkout@v4

      # Step 1: 安装系统和工具链依赖
      - name: Install Core Tools and Libraries
        run: |
          sed -i s@deb.debian@archive.debian@g /etc/apt/sources.list
            apt-get update && apt-get install -y --no-install-recommends \
            wget  curl \
            gnupg  lsb-release  software-properties-common  build-essential  unzip \
            xz-utils   pkg-config  git  ca-certificates  libtinfo5   zlib1g-dev   libffi-dev \
            libgl1-mesa-dev  libglvnd-dev  libgles2-mesa-dev libx11-dev  libxrender-dev \
            libxcb1-dev   libxcb-randr0-dev libxcb-shm0-dev   libxcb-xfixes0-dev libxcb-composite0-dev \
            libx11-xcb-dev libpulse-dev libjack-jackd2-dev libfontconfig-dev libudev-dev  libdrm-dev \
            jq libpciaccess-dev zip nasm bison uthash-dev libjansson-dev libxkbcommon-dev libasound-dev \
            libxcb-*-dev v4l-utils libv4l-dev v4l2loopback-dkms libva-dev libpci-dev libspeexdsp-dev  \
            libwebsocketpp-dev libasio-dev libvlc-dev  libmbedtls-dev 	extra-cmake-modules
      # Step 2: 下载 OBS Studio 源代码
      - name: Download OBS Studio Source Code
        run: |
          # 获取最新版本号（更可靠的解析方式）
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/obsproject/obs-studio/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          echo "LATEST_RELEASE=$LATEST_RELEASE" >> $GITHUB_ENV
          # 下载源码（使用正确的URL格式）
          wget -q "https://github.com/obsproject/obs-studio/archive/refs/tags/${LATEST_RELEASE}.tar.gz" -O obs.tar.gz
          # 解压并重命名目录
          tar -xzf obs.tar.gz
          mv obs-studio-*/ obs
      # Step 2: 安装 CMake 和 Ninja（最新版本）并设置到环境变量
      - name: Install CMake and Ninja
        run: |
           pip install cmake==3.28.0 meson ninja jinja2 swig
      
      # Step 3: 安装 LLVM 20 工具链，并设置到环境变量
      - name: Install LLVM 20
        run: |
          wget https://apt.llvm.org/llvm.sh -O /tmp/llvm.sh
          chmod +x /tmp/llvm.sh
          /tmp/llvm.sh 20 
          echo "LLVM_DIR=/usr/lib/llvm-20" >> $GITHUB_ENV

      # Step 4: 从 Docker 镜像中提取 Qt6 环境
      - name: Download Qt6 Artifact
        uses: dawidd6/action-download-artifact@v9
        with:
          name: qt6-bionic_amd64
          run_id: 17667002330
          run_number: 15
          
      - name: Extract Qt6 to /opt
        run: |
          ls *.tar.gz
          tar -xzf qt6-bionic_amd64.tar.gz -C /
          ls /opt/
          echo "QT6_DIR=/opt/qt6"  | tee -a $GITHUB_ENV ~/.bashrc 
          echo "PATH=/opt/qt6/bin:$PATH" | tee -a $GITHUB_ENV ~/.bashrc
          echo "LD_LIBRARY_PATH=/opt/qt6/lib:$LD_LIBRARY_PATH" | tee -a $GITHUB_ENV ~/.bashrc
          echo "CMAKE_PREFIX_PATH=/opt/qt6/lib/cmake" | tee -a $GITHUB_ENV ~/.bashrc
          echo "/opt/qt6/lib" > /etc/ld.so.conf.d/qt6.conf
          ldconfig
          rm qt*.tar.gz
     
      # Step 2: 安装并编译 QR-Code-generator
      - name: Compile and Install QR-Code-generator
        run: |
          git clone https://github.com/nayuki/QR-Code-generator.git /tmp/QR-Code-generator
          cd /tmp/QR-Code-generator/cpp
          make
          cp libqrcodegencpp.a /usr/local/lib
          cp qrcodegen.hpp /usr/local/include/
          echo "/usr/local/lib" > /etc/ld.so.conf.d/user-libs.conf
          ldconfig

      # Step 3: 编译 libdrm 并安装
      - name: Compile and Install libdrm
        run: |
          git clone https://gitlab.freedesktop.org/mesa/drm.git /tmp/libdrm
          cd /tmp/libdrm
          meson build --prefix=/usr/local
          ninja -C build
          ninja  -C build install
          ldconfig

      - name: update autoconf
        run: |
          wget -q https://ftp.gnu.org/gnu/autoconf/autoconf-latest.tar.gz
          tar zxvf autoconf-latest.tar.gz
          cd autoconf-2.72
          ./configure
          make -j8 && make install
          cd .. && rm auto* -rf

      # Step 4: 安装和配置 vcpkg
      - name: Setup vcpkg and Install Dependencies
        run: |
          git clone https://github.com/microsoft/vcpkg.git /opt/vcpkg
          /opt/vcpkg/bootstrap-vcpkg.sh -disableMetrics
          wget -q https://mirrors.dotsrc.org/gnu/gettext/gettext-0.22.5.tar.gz
          wget -q https://mirrors.dotsrc.org/gnu/automake/automake-1.17.tar.gz
          mkdir -p /opt/vcpkg/downloads/
          mv gettext-0.22.5.tar.gz /opt/vcpkg/downloads/
          mv automake-1.17.tar.gz /opt/vcpkg/downloads/
          /opt/vcpkg/vcpkg install \
            ffmpeg[gpl,postproc,x264,x265,fdk-aac,openssl] \
            openssl \
            sdl2 \
            pipewire \
            pcre2 \
            glib \
            x264 \
            libsrt \
            ffnvcodec nlohmann-json luajit mbedtls libva[glx,wayland] --clean-after-build --triplet=x64-linux-dynamic
          echo "VCPKG_ROOT=/opt/vcpkg" | tee -a $GITHUB_ENV ~/.bashrc
          echo "CMAKE_TOOLCHAIN_FILE=/opt/vcpkg/scripts/buildsystems/vcpkg.cmake" | tee -a $GITHUB_ENV ~/.bashrc
          echo "PKG_LIBRARY_PATH=$PKG_LIBRARY_PATH:/opt/vcpkg/installed/x64-linux-dynamic/lib/pkgconfig" | tee -a $GITHUB_ENV ~/.bashrc
          #mv assets/obs_vcpkg.json obs/vcpkg.json
          #cd obs && /opt/vcpkg/vcpkg x-update-baseline --add-initial-baseline
          #/opt/vcpkg/vcpkg install --clean-after-build --triplet=x64-linux-dynamic
          
          cat > /opt/vcpkg/installed/x64-linux-dynamic/lib/pkgconfig/libpostproc.pc << 'EOF'
          prefix=${pcfiledir}/../..
          exec_prefix=${prefix}
          libdir=${prefix}/lib
          includedir=${prefix}/include

          Name: libpostproc
          Description: FFmpeg postprocessing library
          Version: 58.3.100
          Requires: 
          Requires.private: libavutil >= 59
          Conflicts:
          Libs: -L${libdir}  -lpostproc 
          Libs.private: -lm -latomic
          Cflags: -I${includedir}

          EOF

      # Step 5: 编译 librist 并安装
      - name: Compile and Install librist
        run: |
          git clone https://code.videolan.org/rist/librist /tmp/librist
          cd /tmp/librist
          #export PKG_CONFIG_PATH=$PKG_LIBRARY_PATH:/opt/vcpkg/installed/x64-linux-dynamic/lib/pkgconfig
          export CC=/usr/bin/clang-20 CXX=/usr/bin/clang++-20
          meson build --prefix=/usr/local
          ninja -C build
          ninja  -C build install
          ldconfig  

      # Step 6: 修补 OBS 源代码（如果有必要）
      - name: Apply Source Code Patches
        if: false
        run: |
          sed -i 's/QFile file(cur->location);/QFile file(QString::fromStdString(cur->location.string()));/g' obs/UI/obs-app-theming.cpp
          sed -i 's/QFile debugFile(debugOut);/QFile debugFile(QString::fromStdString(debugOut.string()));/g' obs/UI/obs-app-theming.cpp
          sed -i 's/QDir::addSearchPath("theme", absolute(installSearchDir));/QDir::addSearchPath("theme", QString::fromStdString(absolute(installSearchDir).string()));/g' obs/UI/obs-app-theming.cpp
          sed -i 's/QDir::addSearchPath("theme", absolute(configSearchDir));/QDir::addSearchPath("theme", QString::fromStdString(absolute(configSearchDir).string()));/g' obs/UI/obs-app-theming.cpp
          sed -i "18 i set(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nlink_libraries(stdc++fs)" obs/CMakeLists.txt
          
      # Step 7: 构建 OBS Studio
      - name: Build OBS Studio
        run: |
          #curl -sSf https://sshx.io/get | sh -s run
          mkdir obs/build_ubuntu && cd obs/build_ubuntu
          git clone https://github.com/obsproject/obs-browser.git ../plugins/obs-browser
          git clone https://github.com/obsproject/libdshowcapture.git ../deps/libdshowcapture/src
          git clone https://github.com/obsproject/obs-websocket.git ../plugins/obs-websocket
          export CC=/usr/bin/clang-20 CXX=/usr/bin/clang++-20 LD=/usr/bin/ld.lld-20 LDFLAGS="-fuse-ld=lld"
          cmake .. --preset ubuntu \
            -GNinja \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            #-DCMAKE_TOOLCHAIN_FILE=$CMAKE_TOOLCHAIN_FILE \
            -DENABLE_RELOCATABLE=true \
            -DENABLE_PORTABLE_CONFIG=true \
            -DENABLE_BROWSER=false \
            -DOBS_COMPILE_DEPRECATION_AS_WARNING=true \
            -DENABLE_NVENC=true \
            -DCMAKE_INSTALL_PREFIX=/opt/obs \
            -DCMAKE_C_COMPILER=/usr/bin/clang-20 \
            -DCMAKE_CXX_COMPILER=/usr/bin/clang++-20 \
            -DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=lld" \
            -DCMAKE_SHARED_LINKER_FLAGS="-fuse-ld=lld" \
            -DCMAKE_LINKER=/usr/bin/ld.lld-20 \
            -DCMAKE_VERBOSE_MAKEFILE=ON \
            -DOBS_VERSION_OVERRIDE=$LATEST_RELEASE \
            -DVCPKG_TARGET_TRIPLET=x64-linux-dynamic
          ninja
          ninja install

      # Step 8: 打包为 AppImage
      - name: Package OBS as AppImage
        run: |
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/1-alpha-20250213-1/linuxdeploy-plugin-qt-x86_64.AppImage
          chmod +x *.AppImage
          ./linuxdeploy-x86_64.AppImage -e obs/bin/obs -i obs/share/icons/hicolor/scalable/apps/com.obsproject.Studio.svg -d obs/share/applications/com.obsproject.Studio.desktop \
            --output appimage \
            --plugin qt \
            --appdir /opt/appdir
          mv obs*.AppImage /opt/obs.AppImage

      # Step 9: 上传 OBS 构建的 AppImage
      - name: Upload AppImage
        uses: actions/upload-artifact@v4
        with:
          name: OBS-AppImage
          path: /opt/obs.AppImage
